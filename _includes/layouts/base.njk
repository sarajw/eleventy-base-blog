<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">
		<link rel="alternate" href="feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">

		{#- Uncomment this if youâ€™d like folks to know that you used Eleventy to build your site!  #}
		{#- <meta name="generator" content="{{ eleventy.generator }}"> #}

		{#-
		Plain-text bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. CSS:
			* Add to a per-page bundle using `{% css %}{% endcss %}`
			* Retrieve bundle content using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		2. Or for JavaScript:
			* Add to a per-page bundle using `{% js %}{% endjs %}`
			* Retrieve via `{% getBundle "js" %}` or `{% getBundleFileUrl "js" %}`
		3. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}

		{#- Add an arbitrary string to the bundle #}
		{%- css %}/* This is an arbitrary CSS string added to the bundle */{% endcss %}
		{#- Add the contents of a file to the bundle #}
		{%- css %}{% include "public/css/index.css" %}{% endcss %}
		{#- Or you can add from node_modules #}
		{# {%- css %}{% include "node_modules/prismjs/themes/prism-okaidia.css" %}{% endcss %} #}

		{#- Render the CSS bundle using inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>
		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}

		<link id="current-style-sheet" rel="stylesheet" href="/css/original.css">

		{#- Add the heading-anchors web component to the JavaScript bundle #}
		{%- js %}{% include "node_modules/@zachleat/heading-anchors/heading-anchors.js" %}{% endjs %}
	</head>
	<body>
		<a href="#skip" class="visually-hidden">Skip to main content</a>

		<div id="theme-switching">
			<div class="css-switching">
				<select name="css-in-use" id="css-switcher">
					<option value="original">Original</option>
					<option value="test">Test CSS</option>
				</select>
				<a id="css-download-link" href="/css/original.css" download="">Download CSS</a>
			</div>
			<div id="mode-switcher" style="display: none">
				<p class="visually-hidden" id="light-and-dark-mode-switchers">Light and dark mode switchers</p>
				<button id="lightSwitch" aria-pressed="false" type="button" onclick="switchLight()">Light</button>
				<button id="darkSwitch" aria-pressed="false" type="button" onclick="switchDark()">Dark</button>
				<button id="autoSwitch" aria-pressed="true" type="button" onclick="switchAuto()">Auto</button>
			</div>
		</div>

		<header>
			<a href="/" class="home-link">{{ metadata.title }}</a>

			{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
			<nav>
				<h2 class="visually-hidden">Top level navigation menu</h2>
				<ul class="nav">
				{%- for entry in collections.all | eleventyNavigation %}
					<li class="nav-item"><a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a></li>
				{%- endfor %}
				</ul>
			</nav>
		</header>

		<main id="skip">
			<heading-anchors>
				{{ content | safe }}
			</heading-anchors>
		</main>

		<footer>
			<p><em>Built with <a href="https://www.11ty.dev/">{{ eleventy.generator }}</a></em></p>
		</footer>

		<!-- This page `{{ page.url | htmlBaseUrl }}` was built on {% currentBuildDate %} -->
		<script type="module" src="{% getBundleFileUrl "js" %}"></script>
		<script>
			const html = document.querySelector('html');
			const lightSwitch = document.querySelector('#lightSwitch');
			const darkSwitch = document.querySelector('#darkSwitch');
			const autoSwitch = document.querySelector('#autoSwitch');
			const cssSwitch = document.querySelector("#css-switcher");
			const cssLink = document.querySelector("#css-download-link");
			const currentStyleSheet = document.querySelector("#current-style-sheet");
			const mode = sessionStorage.getItem("mode");
			const css = sessionStorage.getItem("css");

			function switchCSS(cssName) {
				currentStyleSheet.setAttribute("href", `/css/${cssName}.css`);
				cssLink.setAttribute("href", `/css/${cssName}.css`);
				sessionStorage.setItem("css", cssName);
			}

			cssSwitch.addEventListener("change", (event) => {
				switchCSS(event.target.value);
			})

			function switchDark() {
				html.style.colorScheme = "dark";
				sessionStorage.setItem("mode", "dark");
				lightSwitch.setAttribute("aria-pressed","false");
				darkSwitch.setAttribute("aria-pressed","true");
				autoSwitch.setAttribute("aria-pressed","false");
			}
			function switchLight() {
				html.style.colorScheme = "light";
				sessionStorage.setItem("mode", "light");
				lightSwitch.setAttribute("aria-pressed","true");
				darkSwitch.setAttribute("aria-pressed","false");
				autoSwitch.setAttribute("aria-pressed","false");
			}
			function switchAuto() {
				html.style.colorScheme = "light dark";
				sessionStorage.removeItem("mode");
				lightSwitch.setAttribute("aria-pressed","false");
				darkSwitch.setAttribute("aria-pressed","false");
				autoSwitch.setAttribute("aria-pressed","true");
			}

			//check for session preferences
			if (mode) {
				if (mode === "dark") {switchDark();}
				else if (mode === "light") {switchLight();}
			}
			if (css) {
				switchCSS(css);
				cssSwitch.value = css;
			}

			const rootStyles = window.getComputedStyle(html);
			console.log(rootStyles.getPropertyValue("color-scheme"));
    </script>
	</body>
</html>
